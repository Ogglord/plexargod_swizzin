#! /bin/bash
TERM=xterm

if [[ $EUID -ne 0 ]]; then
   echo "$0 must be run as root"
   exit 1
fi

plexargod_path="/etc/plexargod"
plexargod_conf="${plexargod_path}/plexargod.conf"

ArgoOriginDown=$(journalctl -t ${0##*/} -n20 | grep -oP 'msg="unable to connect to the origin[^}]+')
if [ ${ArgoOriginDown} ]; then
    systemd-cat -t ${0##*/} -p warning <<<"cloudflared was unable to contact the origin, is Plex running?"
fi

# If plexargod config directory does not exist, create it
if [ ! -d ${plexargod_path} ]; then
    mkdir -p ${plexargod_path}
else
    echo "dir exists"
fi

# If plexargod config exists, load variables from it.
# else create the directory with a comment line at the top
if [ -f ${plexargod_conf} ]; then
    . ${plexargod_conf}
    echo Sourced "${plexargod_conf}"
else
    echo "# ${plexargod_conf}" > ${plexargod_conf}
fi

[ -z ${XPlexVersion} ] && XPlexVersion='20.04.15.1000'

if [ -z ${PlexServerURL} ]; then
    echo 'Setting PlexServerURL'
    PlexServerURL='http://localhost:32400'
    sed -e "/^PlexServerURL=/ c\\PlexServerURL\=${PlexServerURL}" \
        -e "\$aPlexServerURL=${PlexServerURL}" \
        -i ${plexargod_conf}
else
   echo "PlexServerURL = ${PlexServerURL}"
fi

if [ -z ${ArgoMetricsURL} ]; then
    echo 'Setting ArgoMetricsURL'
    ArgoMetricsURL='http://localhost:33400'
    sed -e "/^ArgoMetricsURL=/ c\\ArgoMetricsURL\=${ArgoMetricsURL}" \
        -e "\$aArgoMetricsURL=${ArgoMetricsURL}" \
        -i ${plexargod_conf}
else
   echo "ArgoMetricsURL = ${ArgoMetricsURL}"
fi

if [ -z ${XPlexProduct} ]; then
    echo 'Setting XPlexProduct'
    XPlexProduct='plexargod'
    sed -e "/^XPlexProduct=/ c\\XPlexProduct\=${XPlexProduct}" \
        -e "\$aXPlexProduct=${XPlexProduct}" \
        -i ${plexargod_conf}
else
    echo "XPlexProduct = ${XPlexProduct}"
fi

if [ -z ${XPlexClientIdentifier} ]; then
    echo 'Setting XPlexClientIdentifier'
    XPlexClientIdentifier=$(cat /proc/sys/kernel/random/uuid)
    sed -e "/^XPlexClientIdentifier=/ c\\XPlexClientIdentifier=${XPlexClientIdentifier}" \
        -e "\$aXPlexClientIdentifier=${XPlexClientIdentifier}" \
        -i ${plexargod_conf}
else
    echo "XPlexClientIdentifier = ${XPlexClientIdentifier}"
fi

function Get-XPlexToken {
    CURL_CONTENT=$(curl -X "POST" -s -i "https://plex.tv/pins.xml" \
        -H "X-Plex-Version: ${XPlexVersion}" \
        -H "X-Plex-Product: ${XPlexProduct}" \
        -H "X-Plex-Client-Identifier: ${XPlexClientIdentifier}")
    PlexPinLink=$(grep -oP 'Location:\ \K.+' <<<${CURL_CONTENT} | tr -dc '[[:print:]]')
    PlexPinCode=$(grep -oP '\<code\>\K[A-Z0-9]{4}' <<<${CURL_CONTENT})

    if [ ${RUN_BY_SYSTEMD} ]; then
        systemd-cat -t cloudflared -p emerg <<<"$(printf '%s\n' "${0##*/}"): You are running plexargod in non-interactive and you do not have a X-Plex-Token set in /etc/plexargod/plexargod.conf"
        systemd-cat -t cloudflared -p emerg <<<"$(printf '%s\n' "${0##*/}"): Run $0 in interactive mode, or go to https://plex.tv/link and enter the code ${PlexPinCode}"
    else
        echo "Go to $(tput setaf 2)https://plex.tv/link$(tput sgr 0) and enter $(tput setaf 2)${PlexPinCode}$(tput sgr 0)"
    fi

    echo -n "Waiting for code entry on the Plex API.."

    declare -i i; i=0
    unset XPlexToken
    while [ -z $XPlexToken ]
    do
        echo -n '.'
        sleep 2
        XPlexToken=$(curl -X "GET" -s ${PlexPinLink} \
            -H "X-Plex-Version: ${XPlexVersion}" \
            -H "X-Plex-Product: ${XPlexProduct}" \
            -H "X-Plex-Client-Identifier: ${XPlexClientIdentifier}" |
            grep -oP '\"auth_token":"\K[^",}]+')

        if [ $i -ge 120 ]; then
            echo ""
            echo "Code ${PlexPinCode} has expired after 4 minutes, generating new code."
            Get-XPlexToken
        fi
        i=i+1
    done
    echo ""
    sed -e "/^XPlexToken=/ c\\XPlexToken\=${XPlexToken}" \
        -e "\$aXPlexToken=${XPlexToken}" \
        -i ${plexargod_conf}
    echo "XPlexToken = ${XPlexToken}"
}

if [ -z ${XPlexToken} ]; then
        Get-XPlexToken
fi

function Get-PlexUserInfo {
    PlexUserInfo=$(curl -s -X "POST" "https://plex.tv/users/sign_in.json" \
        -H "X-Plex-Version: ${XPlexVersion}" \
        -H "X-Plex-Product: ${XPlexProduct}" \
        -H "X-Plex-Client-Identifier: ${XPlexClientIdentifier}" \
        -H "X-Plex-Token: ${XPlexToken}")
}
Get-PlexUserInfo

if [ "${PlexUserInfo}" == '{"error":"Invalid authentication token."}' ]; then
    echo "Invalid token, requesting new Token"
    Get-XPlexToken
else
    echo "X-Plex-Token is valid"
fi

function Get-ArgoURL {
    ArgoURL=$(curl -s "${ArgoMetricsURL}/metrics" | grep -oP 'userHostname="https://\K[^"]*\.trycloudflare\.com' | head -n1)
    if [ "$ArgoURL" ]; then
        echo "ArgoURL = ${ArgoURL}"
    else
        echo "Failed to get ArgoURL from cloudflared"
        exit 1
    fi
}
Get-ArgoURL

function Get-PlexServerPrefs {
    curl -s "${PlexServerURL}/:/prefs" \
        -H "X-Plex-Version: ${XPlexVersion}" \
        -H "X-Plex-Product: ${XPlexProduct}" \
        -H "X-Plex-Client-Identifier: ${XPlexClientIdentifier}" \
        -H "X-Plex-Token: ${XPlexToken}"
}

function Set-PlexServerPrefs {
    # add if/then for secure only switch later (if secure, "https://${ArgoURL}:443")
    customConnections="https://${ArgoURL}:443,http://${ArgoURL}:80"
    curl -s -X "PUT" "${PlexServerURL}/:/prefs?customConnections=${customConnections}&RelayEnabled=0&PublishServerOnPlexOnlineKey=0" \
        -H "X-Plex-Version: ${XPlexVersion}" \
        -H "X-Plex-Product: ${XPlexProduct}" \
        -H "X-Plex-Client-Identifier: ${XPlexClientIdentifier}" \
        -H "X-Plex-Token: ${XPlexToken}"
}
Set-PlexServerPrefs


declare -i i; i=0
while [[ "$ArgoURL" != "$PlexAPIcustomConnections" ]]
do
    sleep 1
    PlexServerProcessedMachineIdentifier=$(curl -s "${PlexServerURL}" -H "X-Plex-Token: ${XPlexToken}" | grep -oP 'machineIdentifier\=\"\K[^"]*')
    if [ ! "${PlexServerProcessedMachineIdentifier}" ]; then
       systemd-cat -t ${0##*/} -p err <<<"Plex Service instance did not return an identifier, is it down?"
       echo "curl output for ${PlexServerURL}"
       curl -vs "${PlexServerURL}" -H "X-Plex-Token: ${XPlexToken}"
       exit 1
    else
        echo "PlexServerProcessedMachineIdentifier = ${PlexServerProcessedMachineIdentifier}"
    fi
    PlexAPIcustomConnections=$(curl -s "https://plex.tv/api/resources?X-Plex-Token=${XPlexToken}" |
        sed -n "/${PlexServerProcessedMachineIdentifier}/{n;p;n;p;n;p;}" |
        grep -oP 'address="\K[^"]*\.trycloudflare\.com' |
        head -n1)
    if [ $i -ge 15 ]; then
        systemd-cat -t ${0##*/} -p err <<<"Plex API does not match cloudflared after 30 seconds."
        exit 1
    fi
    i=i+1
done

echo "Plex API is updated with the current Argo Tunnel Address."
exit 0
